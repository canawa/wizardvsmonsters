from fastapi import FastAPI
import secrets
from pydantic import BaseModel
import statistics
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from starlette.responses import FileResponse
import math
app = FastAPI()
payout=0
result=0
symbols = (
    ['J'] * 100 +    # —Å–∏–º–≤–æ–ª—ã
    ['Q'] * 100 +    # —Å–∏–º–≤–æ–ª—ã
    ['K'] * 100 +     
    ['A'] * 100 +    
    ['üçå'] * 100  +
    ['üçç'] * 100 +
    ['ü´ê'] * 100  +    
    ['üçê'] * 100  +    
    ['üçì'] * 100 +
    ['‚ö°'] * 27   +    
    ['üî•'] * 20 +
    ['üö™'] * 7      
)

app.mount("/static", StaticFiles(directory="static", html=True), name="static") # –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—á–∫—É –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–∞–ø–∫–∞ —Å—Ç–∞—Ç–∏–∫
@app.get('/')
def read_index():
    return FileResponse('static/index.html')


shutterMultiplier = (
    [2] * 500 +   # –∏–∫—Å—ã –¥–ª—è —à—Ç–æ—Ä
    [3] * 400 +
    [5] * 100 +
    [10] * 40 +  
    [25] * 10 +
    [50] * 2 + 
    [75] * 1
      
)
def gameLogic(bet,result,counter,payout):
        gameResults = ''
        row1=result[:5]
        row2=result[5:10]
        row3=result[10:15]
        row4=result[15:20]
        row5=result[20:25]
        row6=result[25:]
        if row1.count('üî•') > 1:
            z = row1.index('üî•')
            row1[z] = row1[z].replace('üî•', 'Q', 1)
        if row2.count('üî•') > 1:
            z = row2.index('üî•')
            row2[z] = row2[z].replace('üî•', 'Q', 1)
        if row3.count('üî•') > 1:
            z = row3.index('üî•')
            row3[z] = row3[z].replace('üî•', 'Q', 1)
        if row4.count('üî•') > 1:
            z = row4.index('üî•')
            row4[z] = row4[z].replace('üî•', 'Q', 1)
        if row5.count('üî•') > 1:
            z = row5.index('üî•')
            row5[z] = row5[z].replace('üî•', 'Q', 1)
        if row6.count('üî•') > 1:
            z = row6.index('üî•')
            row6[z] = row6[z].replace('üî•', 'Q', 1)
        if row1.count('‚ö°')>1:
            z = row1.index('‚ö°')
            row1[z]=row1[z].replace('‚ö°','J',1)
        if row2.count('‚ö°')>1:
            z = row2.index('‚ö°')
            row2[z]=row2[z].replace('‚ö°','J',1)
        if row3.count('‚ö°')>1:
            z = row3.index('‚ö°')
            row3[z]=row3[z].replace('‚ö°','J',1)
        if row4.count('‚ö°')>1:
            z = row4.index('‚ö°')
            row4[z]=row4[z].replace('‚ö°','J',1)
        if row5.count('‚ö°')>1:
            z = row5.index('‚ö°')
            row5[z]=row5[z].replace('‚ö°','J',1)
        if row6.count('‚ö°')>1:
            z = row6.index('‚ö°')
            row6[z]=row6[z].replace('‚ö°','J',1)
            

        if result.count('üî•')>=1:
            multiplier = 2*result.count('üî•')
        else:
            multiplier = 1

        if result.count('J')>=8:
            payout=(payout+bet*0.025*result.count('J'))
            counter=counter+1
            gameResults = gameResults + '–°—ã–≥—Ä–∞–ª–∏ J ' + str(payout)
        if result.count('Q')>=8:
            payout=(payout+bet*0.05*result.count('Q'))
            counter=counter+1
            gameResults = gameResults + '–°—ã–≥—Ä–∞–ª–∏ Q ' + str(payout)
        if result.count('K')>=8:
            payout=(payout+bet*0.10*result.count('K'))
            counter=counter+1
            gameResults = gameResults + '–°—ã–≥—Ä–∞–ª–∏ K ' + str(payout)
        if result.count('A')>=7:
            
            payout=(payout+bet*0.12*result.count('A'))
            counter=counter+1
            gameResults = gameResults + '–°—ã–≥—Ä–∞–ª–∏ A' + str(payout)
        if result.count('üçå')>=7:
            
            payout=(payout+bet*0.14*result.count('üçå'))
            counter=counter+1
            gameResults = gameResults + '–°—ã–≥—Ä–∞–ª–∏ üçå' +str( payout)
        if result.count('üçç')>=7:
            
            payout=(payout+bet*0.2*result.count('üçç'))
            counter=counter+1
            gameResults = gameResults + '–°—ã–≥—Ä–∞–ª–∏ üçç' +str( payout)
        if result.count('ü´ê')>=7:
            
            payout=(payout+bet*0.24*result.count('ü´ê'))
            counter=counter+1
            gameResults = gameResults + '–°—ã–≥—Ä–∞–ª–∏ ü´ê' + str(payout)
        if result.count('üçê')>=7:
            payout=(payout+bet*0.28*result.count('üçê'))
            
            counter=counter+1
            gameResults = gameResults + '–°—ã–≥—Ä–∞–ª–∏ üçê ' + str(payout)
        if result.count('üçì')>=7:
            
            payout=(payout+bet*0.35*result.count('üçì'))
            counter=counter+1
            gameResults = gameResults + '–°—ã–≥—Ä–∞–ª–∏ üçì' + str(payout)
        

        return {'payout':payout, 'counter':counter, 'gameResults': gameResults, 'row1':row1,'row2':row2,'row3':row3,'row4':row4, 'row5':row5,'row6':row6}
        

@app.get('/api/bonus')
def bonusGame(bet:int,counter:int,gameResults: str):
    multiplier=1
    payout = 0
    noWin=0
    spinsAmount = 10
    shutterPos=[]
    overallPayout=0
    for z in range(spinsAmount):
        result=[]
        payout=0
        for i in range(0,31):
            result.append(secrets.choice(symbols))
        for pos in range(len(shutterPos)):
            result[shutterPos[pos]]='üö™'
        game = gameLogic(bet,result,counter,payout)
        payout=game['payout']
        counter=game['counter']
        gameResults = game['gameResults']
        if result.count('üö™')>=1:
            for i in range(result.count('üö™')):
                multiplier = multiplier + secrets.choice(shutterMultiplier)
            payout=payout*multiplier
            shutterPos.append(result.index('üö™'))

        else:
            payout=payout*multiplier
        if result.count('‚ö°')>=3:
            spinsAmount = spinsAmount+2
        overallPayout=overallPayout+payout
    if overallPayout==0:
        noWin=noWin+1
    return {'payout':overallPayout, 'counter':counter,'gameResults':gameResults,'noWinFreeSpin': noWin }
    


bonusCount =0
@app.get('/api/spin')
def spinTest():
    
    bigWinCount=0
    bet = 100
    hitFreq=0
    counter = 0
    result=[]
    multiplier=1
    global payout
    payout=0
    bonusCount=0
    for i in range(0,30):
        result.append(secrets.choice(symbols))
    
    game=gameLogic(bet,result,counter,payout)
    payout=game['payout']
    counter=game['counter']
    gameResults = game['gameResults']
    row1=game['row1']
    row2=game['row2']
    row3=game['row3']
    row4=game['row4']
    row5=game['row5']
    row6=game['row6']
    if result.count('üö™')>=1:
        for i in range(result.count('üö™')):
            multiplier = multiplier + secrets.choice(shutterMultiplier)
        payout=payout*multiplier
    else:
        payout=payout*multiplier
    if result.count('‚ö°')>=4:
        bonusCount += 1 
        payout = payout + bonusGame(bet,counter,gameResults)['payout']
        gameResults ='–°—ã–≥—Ä–∞–ª–∞ –ë–û–ù–£–°–ö–ê üíµüíµ' + gameResults  + str(payout)
    else:
        bonusCount=0
    if payout>=bet*10:
        bigWinCount = bigWinCount+1
    if len(gameResults) > 3:
            hitFreq = hitFreq+1
    
    return {'payout':payout,'—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å—ã–≥—Ä–∞–ª–æ': counter, 'bigWinCount': bigWinCount, 'hitFrequency':hitFreq, 'bonusCount': bonusCount, 'symbolsPayout': gameResults, 'multiplier':multiplier, 'row1': row1,'row2':row2,'row3':row3,'row4':row4,'row5':row5,'row6':row6}
    
userBalance = 100000
@app.get('/api/getBalanceOnOpen')
def getBalanceOnOpen():
    global userBalance
    global payout
    return {'balance': userBalance, 'payout': math.floor(payout)}

@app.get('/api/balance')
def balance():
    global userBalance
    global payout
    beforeEndOfTheSpin = userBalance - 100
    userBalance = userBalance - 100 + payout
    print(type(payout))
    return {'balance': userBalance, 'beforeEndOfTheSpin': beforeEndOfTheSpin, 'payout': math.floor(payout)}



@app.get('/api/stats')
def stats():
    rtp=[]
    bonus=[]
    hit=[]
    noWin=[]
    medianWin=[]
    maxBonusWin=[]
    bigWin=[]
    bet=100
    for _ in range(1,2000000):
        spinResult = spinTest()
        rtp.append(spinResult['payout'])
        bonus.append(spinResult['bonusCount']) # –º–Ω–æ–≥–æ —á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ –æ–±—Ä–∞—â–∞–µ–º—Å—è —Ç–æ–∫ –∫ –±–æ–Ω—É—Å –∫–∞—É–Ω—Ç
        hit.append(spinResult['hitFrequency'])
        bigWin.append(spinResult['bigWinCount'])
    for _ in range(1,100000):
        bonusResult=bonusGame(100,0,'')
        noWin.append(bonusResult['noWinFreeSpin'])
        medianWin.append(bonusResult['payout']/bet)
        maxBonusWin.append(bonusResult['payout']/bet)
    return {
        'RTP': str(sum(rtp)/len(rtp))[:5]+'%',
        'BONUS CHANCE': str(float(str(sum(bonus)/len(bonus))[:5])*100)[:5]+'%',
        'HIT FREQUENCY': str(float(str(sum(hit)/len(hit))[:5])*100)[:5]+'%',
        'NOWINFS': str(float(str(sum(noWin)/len(noWin))[:5])*100)[:5]+'%',
        'MEDIAN FS WIN': str(statistics.median(medianWin))+'x',
        'MAX FS WIN': str((max(maxBonusWin)))+'x',
        'BIG WIN (10X+)':  str(float(str(sum(bigWin)/len(bigWin))[:5])*100)[:5]+'%',
    }



